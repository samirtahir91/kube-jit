openapi: 3.0.0
info:
  description: Self-service Kubernetes RBAC JIT Requests with Google/Azure/Github Oauth.
  title: Kube-JIT API
  contact: {}
  version: "1.0"
paths:
  /admin/clean-expired:
    post:
      description: >-
        Deletes JIT requests where endDate is in the past and status is
        "Requested" (not Approved or Rejected). Admin only.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - admin
      summary: Clean up expired non-approved JIT requests
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Expired non-approved requests cleaned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.CleanExpiredResponse"
        "401":
          description: "Unauthorized: admin only"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Failed to clean expired requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /approvals:
    get:
      description: >-
        Returns the pending JIT requests for the authenticated user's approver
        groups.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - records
      summary: Get pending JIT requests for approver groups
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of pending requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.PendingApprovalsResponse"
        "401":
          description: "Unauthorized: no approver groups in session"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Failed to fetch pending requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /approve-reject:
    post:
      description: >-
        Approves or rejects pending JIT access requests. Admins and platform
        approvers can approve/reject multiple requests at once. Non-admins can
        approve/reject individual namespaces.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - request
      summary: Approve or reject JIT access requests
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0, kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: Approval/rejection payload (admins/platform approvers use AdminApproveRequest, non-admins use UserApproveRequest)
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/handlers.AdminApproveRequest"
                - $ref: "#/components/schemas/handlers.UserApproveRequest"
            examples:
              AdminApproveRequest:
                summary: Admin Approve Example
                value:
                  approverID: "admin123"
                  approverName: "Admin User"
                  requests:
                    - ID: 1
                      userID: "user1"
                      username: "alice"
                      clusterName: "prod"
                      roleName: "admin"
                      namespaces: ["default", "kube-system"]
                      justification: "Need access for deployment"
                      startDate: "2024-05-01T00:00:00Z"
                      endDate: "2024-05-02T00:00:00Z"
                      status: "approved"
                      users: ["alice"]
                  status: "approved"
              UserApproveRequest:
                summary: User Approve Example
                value:
                  approverID: "user123"
                  approverName: "User"
                  namespaceApprovals:
                    - namespace: "default"
                      approved: true
                      approverID: "user123"
                      approverName: "User"
                      groupID: "group1"
                      groupName: "Dev Team"
                    - namespace: "kube-system"
                      approved: false
                      approverID: "user123"
                      approverName: "User"
                      groupID: "group1"
                      groupName: "Dev Team"
                  status: "approved"
      responses:
        "200":
          description: Requests processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "401":
          description: "Unauthorized: no approver groups in session"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Failed to process requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /approving-groups:
    get:
      description: >-
        Returns the list of platform approving groups for the authenticated
        user.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - records
      summary: Get platform approving groups
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.Team"
        "401":
          description: "Unauthorized: no token in session data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /azure/profile:
    get:
      description: >-
        Returns the normalized Azure user profile for the authenticated user.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - azure
      summary: Get the logged in user's Azure profile
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.NormalizedUserData"
        "401":
          description: "Unauthorized: no token in session data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /build-sha:
    get:
      description: Returns the current build SHA for the running API.
      tags:
        - health
      summary: Get build SHA
      responses:
        "200":
          description: Current build SHA
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.BuildShaResponse"
  /client_id:
    get:
      description: Returns the OAuth client_id, provider, redirect URI, and auth URL for
        the frontend to initiate login.
      tags:
        - auth
      summary: Get OAuth client configuration
      responses:
        "200":
          description: OAuth client configuration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.OauthClientIdResponse"
  /github/profile:
    get:
      description: >-
        Returns the normalized GitHub user profile for the authenticated user.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - github
      summary: Get the logged in user's GitHub profile
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.NormalizedUserData"
        "401":
          description: "Unauthorized: no token in session data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /google/profile:
    get:
      description: >-
        Returns the normalized Google user profile for the authenticated user.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - google
      summary: Get the logged in user's Google profile
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.NormalizedUserData"
        "401":
          description: "Unauthorized: no token in session data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /healthz:
    get:
      description: Returns a simple status message to verify the API is running.
      tags:
        - health
      summary: Health check endpoint
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /history:
    get:
      description: >-
        Returns the latest JIT requests for a user with optional limit and date
        range.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies:

        Login required to test via browser, else test via curl
      tags:
        - records
      summary: Get JIT requests for a user
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
        - description: User ID
          name: userID
          in: query
          schema:
            type: string
        - description: Username
          name: username
          in: query
          schema:
            type: string
        - description: Limit
          name: limit
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/models.RequestWithNamespaceApprovers"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /k8s-callback:
    post:
      description: Used by the downstream Kubernetes controller to callback for status
        update. Validates the signed URL and updates the request status in the
        database. Returns a success message.
      tags:
        - k8s
      summary: Kubernetes controller callback for status update
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Callback payload (ticketID, status, message)
        required: true
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Failed to update request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /logout:
    post:
      description: Clears all session cookies with the session prefix and logs the user out.
      tags:
        - auth
      summary: Log out and clear all session cookies
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /oauth/azure/callback:
    get:
      description: Handles the Azure OAuth callback, exchanges the code for an access
        token, fetches user info, sets session data, and returns normalized user
        data and expiration time.
      tags:
        - azure
      summary: Azure OAuth callback
      parameters:
        - description: Azure OAuth authorization code
          name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Normalized user data and expiration time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.LoginResponse"
        "400":
          description: Missing or invalid code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "403":
          description: Unauthorized domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /oauth/github/callback:
    get:
      description: Handles the GitHub OAuth callback, exchanges the code for an access
        token, fetches user info, sets session data, and returns normalized user
        data and expiration time.
      tags:
        - github
      summary: GitHub OAuth callback
      parameters:
        - description: GitHub OAuth authorization code
          name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Normalized user data and expiration time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.LoginResponse"
        "400":
          description: Missing or invalid code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "403":
          description: Unauthorized org
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /oauth/google/callback:
    get:
      description: Handles the Google OAuth callback, exchanges the code for an access
        token, fetches user info, sets session data, and returns normalized user
        data and expiration time.
      tags:
        - google
      summary: Google OAuth callback
      parameters:
        - description: Google OAuth authorization code
          name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Normalized user data and expiration time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.LoginResponse"
        "400":
          description: Missing or invalid code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "403":
          description: Unauthorized domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /permissions:
    post:
      description: >-
        Returns the user's permissions and group memberships for the specified
        provider (GitHub, Google, Azure).

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - auth
      summary: Get common permissions for the logged in user
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/handlers.CommonPermissionsRequest"
        description: Provider payload
        required: true
      responses:
        "200":
          description: User permissions and groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.CommonPermissionsResponse"
        "400":
          description: Missing or invalid provider
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "401":
          description: "Unauthorized: no token in session data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Failed to fetch user groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /roles-and-clusters:
    get:
      description: >-
        Returns the list of clusters and roles available to the user.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - records
      summary: Get available clusters and roles
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: clusters and roles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/handlers.ClustersAndRolesResponse"
        "401":
          description: "Unauthorized: no token in session data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
  /submit-request:
    post:
      description: >-
        Creates a new JIT access request for the authenticated user.

        Requires one or more cookies named kube_jit_session_<number> (e.g., kube_jit_session_0, kube_jit_session_1).

        Pass split cookies in the Cookie header, for example:

        -H "Cookie: kube_jit_session_0=${cookie_0};kube_jit_session_1=${cookie_1}"

        Note: Swagger UI cannot send custom Cookie headers due to browser security restrictions. Use curl for testing with split cookies.
      tags:
        - request
      summary: Submit a new JIT access request
      parameters:
        - description: "Session cookies (multiple allowed, names: kube_jit_session_0,
            kube_jit_session_1, etc.)"
          name: Cookie
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/handlers.SubmitRequestPayload"
        description: JIT request payload
        required: true
      responses:
        "200":
          description: Request submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "401":
          description: "Unauthorized: no token in session data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
        "500":
          description: Failed to submit request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/models.SimpleMessageResponse"
servers:
  - url: /kube-jit-api
components:
  schemas:
    handlers.AdminApproveRequest:
      type: object
      properties:
        approverID:
          type: string
        approverName:
          type: string
        requests:
          type: array
          items:
            $ref: "#/components/schemas/models.RequestData"
        status:
          type: string
    handlers.UserApproveRequest:
      type: object
      properties:
        approverID:
          type: string
        approverName:
          type: string
        namespaceApprovals:
          type: array
          items:
            $ref: "#/components/schemas/models.NamespaceApprovalInfo"
        status:
          type: string
    handlers.BuildShaResponse:
      type: object
      properties:
        sha:
          type: string
    handlers.CleanExpiredResponse:
      type: object
      properties:
        deleted:
          type: integer
        message:
          type: string
    handlers.ClustersAndRolesResponse:
      type: object
      properties:
        clusters:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/models.Roles"
    handlers.CommonPermissionsRequest:
      type: object
      properties:
        provider:
          type: string
          example: github
    handlers.CommonPermissionsResponse:
      type: object
      properties:
        adminGroups:
          type: array
          items:
            $ref: "#/components/schemas/models.Team"
        approverGroups:
          type: array
          items:
            $ref: "#/components/schemas/models.Team"
        isAdmin:
          type: boolean
        isApprover:
          type: boolean
        isPlatformApprover:
          type: boolean
        platformApproverGroups:
          type: array
          items:
            $ref: "#/components/schemas/models.Team"
    handlers.OauthClientIdResponse:
      type: object
      properties:
        auth_url:
          type: string
        client_id:
          type: string
        provider:
          type: string
        redirect_uri:
          type: string
    handlers.PendingApprovalsResponse:
      type: object
      properties:
        pendingRequests:
          type: array
          items:
            $ref: "#/components/schemas/handlers.PendingRequest"
    handlers.PendingRequest:
      type: object
      properties:
        CreatedAt:
          type: string
        ID:
          type: integer
        approvedList:
          type: array
          items:
            type: boolean
        clusterName:
          type: string
        endDate:
          type: string
        groupIDs:
          type: array
          items:
            type: string
        groupNames:
          type: array
          items:
            type: string
        justification:
          type: string
        namespaces:
          type: array
          items:
            type: string
        roleName:
          type: string
        startDate:
          type: string
        status:
          type: string
        userID:
          type: string
        username:
          type: string
        users:
          type: array
          items:
            type: string
    handlers.SubmitRequestPayload:
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/models.Cluster"
        endDate:
          type: string
        justification:
          type: string
        namespaces:
          type: array
          items:
            type: string
        requestorId:
          type: string
        requestorName:
          type: string
        role:
          $ref: "#/components/schemas/models.Roles"
        startDate:
          type: string
        users:
          type: array
          items:
            type: string
    models.Cluster:
      type: object
      properties:
        name:
          type: string
    models.LoginResponse:
      type: object
      properties:
        expiresIn:
          type: integer
        userData:
          $ref: "#/components/schemas/models.NormalizedUserData"
    models.NamespaceApprovalInfo:
      type: object
      properties:
        approved:
          type: boolean
        approverID:
          type: string
        approverName:
          type: string
        groupID:
          type: string
        groupName:
          type: string
        namespace:
          type: string
    models.NormalizedUserData:
      type: object
      properties:
        avatar_url:
          type: string
        email:
          type: string
        id:
          type: string
        name:
          type: string
        provider:
          type: string
    models.RequestData:
      type: object
      properties:
        CreatedAt:
          type: string
        DeletedAt:
          type: string
        ID:
          type: integer
        UpdatedAt:
          type: string
        approverIDs:
          type: array
          items:
            type: string
        approverNames:
          type: array
          items:
            type: string
        clusterName:
          type: string
        email:
          type: string
        endDate:
          type: string
        fullyApproved:
          type: boolean
        justification:
          type: string
        namespaces:
          type: array
          items:
            type: string
        notes:
          type: string
        roleName:
          type: string
        startDate:
          type: string
        status:
          type: string
        userID:
          type: string
        username:
          type: string
        users:
          type: array
          items:
            type: string
    models.RequestWithNamespaceApprovers:
      type: object
      properties:
        CreatedAt:
          type: string
        DeletedAt:
          type: string
        ID:
          type: integer
        UpdatedAt:
          type: string
        approverIDs:
          type: array
          items:
            type: string
        approverNames:
          type: array
          items:
            type: string
        clusterName:
          type: string
        email:
          type: string
        endDate:
          type: string
        fullyApproved:
          type: boolean
        justification:
          type: string
        namespaceApprovals:
          type: array
          items:
            $ref: "#/components/schemas/models.NamespaceApprovalInfo"
        namespaces:
          type: array
          items:
            type: string
        notes:
          type: string
        roleName:
          type: string
        startDate:
          type: string
        status:
          type: string
        userID:
          type: string
        username:
          type: string
        users:
          type: array
          items:
            type: string
    models.Roles:
      type: object
      properties:
        name:
          type: string
    models.SimpleMessageResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        status:
          type: string
    models.Team:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
